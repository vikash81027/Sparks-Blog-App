{"version":3,"file":"static/js/653.0b434966.chunk.js","mappings":"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","sources":["../node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["// src/utils/regular-expression.ts\nvar escapeRegExpSpecialCharacters = (text) => {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\n// src/utils/shadow-css.ts\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = (selector) => {\n  const placeholders = [];\n  let index = 0;\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  const ss = {\n    content,\n    placeholders\n  };\n  return ss;\n};\nvar restoreSafeSelector = (placeholders, content) => {\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nvar _polyfillHost = \"-shadowcsshost\";\nvar _polyfillSlotted = \"-shadowcssslotted\";\nvar _polyfillHostContext = \"-shadowcsscontext\";\nvar _parenSuffix = \")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\";\nvar _cssColonHostRe = new RegExp(\"(\" + _polyfillHost + _parenSuffix, \"gim\");\nvar _cssColonHostContextRe = new RegExp(\"(\" + _polyfillHostContext + _parenSuffix, \"gim\");\nvar _cssColonSlottedRe = new RegExp(\"(\" + _polyfillSlotted + _parenSuffix, \"gim\");\nvar _polyfillHostNoCombinator = _polyfillHost + \"-no-combinator\";\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = \"([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\";\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\\\b)`, \"gim\");\nvar _colonSlottedRe = createSupportsRuleRe(\"::slotted\");\nvar _colonHostRe = createSupportsRuleRe(\":host\");\nvar _colonHostContextRe = createSupportsRuleRe(\":host-context\");\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = (input) => {\n  return input.replace(_commentRe, \"\");\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = (input) => {\n  return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = \"{\";\nvar CLOSE_CURLY = \"}\";\nvar BLOCK_PLACEHOLDER = \"%BLOCK%\";\nvar processRules = (input, ruleCallback) => {\n  const inputWithEscapedBlocks = escapeBlocks(input);\n  let nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = \"\";\n    let suffix = m[4];\n    let contentPrefix = \"\";\n    if (suffix && suffix.startsWith(\"{\" + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = \"{\";\n    }\n    const cssRule = {\n      selector,\n      content\n    };\n    const rule = ruleCallback(cssRule);\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n};\nvar escapeBlocks = (input) => {\n  const inputParts = input.split(_curlyRe);\n  const resultParts = [];\n  const escapedBlocks = [];\n  let bracketCount = 0;\n  let currentBlockParts = [];\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    const part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(\"\"));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(\"\"));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  const strEscapedBlocks = {\n    escapedString: resultParts.join(\"\"),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = (cssText) => {\n  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n  return cssText;\n};\nvar convertColonRule = (cssText, regExp, partReplacer) => {\n  return cssText.replace(regExp, (...m) => {\n    if (m[2]) {\n      const parts = m[2].split(\",\");\n      const r = [];\n      for (let i = 0; i < parts.length; i++) {\n        const p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(\",\");\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nvar colonHostPartReplacer = (host, part, suffix) => {\n  return host + part.replace(_polyfillHost, \"\") + suffix;\n};\nvar convertColonHost = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = (host, part, suffix) => {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + \", \" + part + \" \" + host + suffix;\n  }\n};\nvar convertColonSlotted = (cssText, slotScopeId) => {\n  const slotClass = \".\" + slotScopeId + \" > \";\n  const selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n    if (m[2]) {\n      const compound = m[2].trim();\n      const suffix = m[3];\n      const slottedSelector = slotClass + compound + suffix;\n      let prefixSelector = \"\";\n      for (let i = m[4] - 1; i >= 0; i--) {\n        const char = m[5][i];\n        if (char === \"}\" || char === \",\") {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      const orgSelector = (prefixSelector + slottedSelector).trim();\n      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\n      if (orgSelector !== addedSelector) {\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\n        selectors.push({\n          orgSelector,\n          updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors,\n    cssText\n  };\n};\nvar convertColonHostContext = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = (cssText) => {\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, \" \"), cssText);\n};\nvar makeScopeMatcher = (scopeSelector2) => {\n  const lre = /\\[/g;\n  const rre = /\\]/g;\n  scopeSelector2 = scopeSelector2.replace(lre, \"\\\\[\").replace(rre, \"\\\\]\");\n  return new RegExp(\"^(\" + scopeSelector2 + \")\" + _selectorReSuffix, \"m\");\n};\nvar selectorNeedsScoping = (selector, scopeSelector2) => {\n  const re = makeScopeMatcher(scopeSelector2);\n  return !re.test(selector);\n};\nvar injectScopingSelector = (selector, scopingSelector) => {\n  return selector.replace(_selectorPartsRe, (_, before = \"\", _colonGroup, colon = \"\", after = \"\") => {\n    return before + scopingSelector + colon + after;\n  });\n};\nvar applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    const replaceBy = `.${hostSelector}`;\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + \" \");\n  }\n  return scopeSelector2 + \" \" + selector;\n};\nvar applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  const isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);\n  const className = \".\" + scopeSelector2;\n  const _scopeSelectorPart = (p) => {\n    let scopedP = p.trim();\n    if (!scopedP) {\n      return \"\";\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);\n    } else {\n      const t = p.replace(_polyfillHostRe, \"\");\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  const safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  let scopedSelector = \"\";\n  let startIndex = 0;\n  let res;\n  const sep = /( |>|\\+|~(?!=))\\s*/g;\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  let shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    const separator = res[1];\n    const part2 = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;\n    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;\n    scopedSelector += `${scopedPart} ${separator} `;\n    startIndex = sep.lastIndex;\n  }\n  const part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n  return selector.split(\",\").map((shallowPart) => {\n    if (slotSelector && shallowPart.indexOf(\".\" + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(\", \");\n};\nvar scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector) => {\n  return processRules(cssText, (rule) => {\n    let selector = rule.selector;\n    let content = rule.content;\n    if (rule.selector[0] !== \"@\") {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n    }\n    const cssRule = {\n      selector: selector.replace(/\\s{2,}/g, \" \").trim(),\n      content\n    };\n    return cssRule;\n  });\n};\nvar scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId) => {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  const slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n  }\n  cssText = replaceShadowCssHost(cssText, hostScopeId);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, \" $1 \");\n  return {\n    cssText: cssText.trim(),\n    // We need to replace the shadow CSS host string in each of these selectors since we created\n    // them prior to the replacement happening in the components CSS text.\n    slottedSelectors: slotted.selectors.map((ref) => ({\n      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\n      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)\n    }))\n  };\n};\nvar replaceShadowCssHost = (cssText, hostScopeId) => {\n  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n};\nvar scopeCss = (cssText, scopeId) => {\n  const hostScopeId = scopeId + \"-h\";\n  const slotScopeId = scopeId + \"-s\";\n  const commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n  cssText = [scoped.cssText, ...commentsWithHash].join(\"\\n\");\n  scoped.slottedSelectors.forEach((slottedSelector) => {\n    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), \"g\");\n    cssText = cssText.replace(regex, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\nexport {\n  scopeCss\n};\n"],"names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","createSupportsRuleRe","selector","concat","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","_selectorPartsRe","BLOCK_PLACEHOLDER","escapeBlocks","input","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","length","part","push","join","escapedString","blocks","convertColonRule","cssText","regExp","partReplacer","replace","_len","arguments","m","Array","_key","parts","r","i","p","trim","colonHostPartReplacer","host","suffix","colonHostContextPartReplacer","indexOf","selectorNeedsScoping","scopeSelector2","re","makeScopeMatcher","test","injectScopingSelector","scopingSelector","_","undefined","applyStrictSelectorScope","hostSelector","className","_scopeSelectorPart","scopedP","applySimpleSelectorScope","lastIndex","replaceBy","selector2","t","safeContent","placeholders","index","content","keep","pseudo","exp","safeSelector","res","scopedSelector","startIndex","sep","shouldScope","exec","separator","part2","slice","scopedPart","substring","restoreSafeSelector","scopeSelectors","scopeSelectorText","slotSelector","processRules","ruleCallback","inputWithEscapedBlocks","nextBlockIndex","contentPrefix","startsWith","rule","scopeSelector","map","shallowPart","scopeCssText","scopeId","hostScopeId","slotScopeId","slotted","convertColonSlotted","slotClass","selectors","_len2","_key2","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimEnd","updatedSelector","convertColonHostContext","convertColonHost","insertPolyfillHostInCssText","reduce","result","pattern","convertShadowDOMSelectors","replaceShadowCssHost","slottedSelectors","ref","scopeCss","commentsWithHash","match","stripComments","scoped","forEach","regex"],"sourceRoot":""}